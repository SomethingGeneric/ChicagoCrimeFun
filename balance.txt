
        # # Case 1: Left Left
        # if node.balance == 2 and node.value < root.left.value:
        #     print("Left Left")
        #     return self.right_rotate(node)

        # # Case 2: Right Right
        # if node.balance == -2 and node.value > root.right.value:
        #     print("Right Right")
        #     return self.left_rotate(node)

        # # Case 3: Left Right
        # if node.balance == 2 and node.value > root.left.value:
        #     print("Left Right")
        #     node.left = self.left_rotate(node.left)
        #     return self.right_rotate(node)

        # # Case 4: Right Left
        # if node.balance == -2 and node.value < root.right.value:
        #     print("Right Left")
        #     node.right = self.right_rotate(node.right)
        #     return self.left_rotate(node)


         if root is None: 
            return AVLTreeNode(key, value)
            print("Creating new root node")
            self.root = node
            return node
        # If the key is less than the root, insert it to the left.
        elif key < root.key:
            root.left = self._insert(root.left, key, value)
        elif node.value < root.value:
            print("Value less than root")
            root.left = self._insert(root.left, node)
        # If the key is greater than the root, insert it to the right.
        elif key > root.key:
            root.right = self._insert(root.right, key, value)
        elif node.value > root.value:
            print("Value greater than root")
            root.right = self._insert(root.right, node)
        else:
            # Assign the value item to the value attribute.
            root.value = value